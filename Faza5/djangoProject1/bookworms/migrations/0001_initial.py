# Generated by Django 4.2.1 on 2023-06-01 01:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UsernamesPasswords',
            fields=[
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('idUser', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=45, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('email', models.CharField(max_length=45, unique=True)),
                ('profileImage', models.ImageField(default='/images/userProfile.svg', upload_to='images/')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usernamespasswords_set', related_query_name='usernamespasswords', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usernamespasswords_set', related_query_name='usernamespasswords', to='auth.permission')),
            ],
            options={
                'db_table': 'UsernamesPasswords',
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('idAdmin', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'Administrator',
            },
        ),
        migrations.CreateModel(
            name='AuthorShow',
            fields=[
                ('idAuthor', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('surname', models.CharField(max_length=45)),
                ('bioShow', models.TextField()),
            ],
            options={
                'db_table': 'AuthorShow',
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('idBadge', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'Badge',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('idBook', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=45)),
                ('genre', models.CharField(max_length=60)),
                ('description', models.TextField()),
                ('coverImage', models.ImageField(default='images/userProfile.svg', upload_to='images/')),
            ],
            options={
                'db_table': 'Book',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('idChallenge', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=45)),
                ('startDate', models.DateField()),
                ('endDate', models.DateField()),
                ('idBadge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookworms.badge')),
            ],
            options={
                'db_table': 'Challenge',
            },
        ),
        migrations.CreateModel(
            name='Reviewer',
            fields=[
                ('idUserRew', models.OneToOneField(db_column='idUserRew', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField()),
            ],
            options={
                'db_table': 'Reviewer',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('idUser', models.OneToOneField(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idBook', models.ForeignKey(db_column='idBook', on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'WishList',
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('idReview', models.AutoField(primary_key=True, serialize=False)),
                ('reviewText', models.TextField()),
                ('idBook', models.ForeignKey(db_column='idBook', on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='RecommendationList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idBook', models.ForeignKey(db_column='idBook', on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'RecommendationList',
            },
        ),
        migrations.CreateModel(
            name='ReadList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(null=True)),
                ('idBook', models.ForeignKey(db_column='idBook', on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ReadList',
            },
        ),
        migrations.CreateModel(
            name='ChallengeBooks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idBook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
                ('idChallenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookworms.challenge')),
            ],
            options={
                'db_table': 'ChallengeBooks',
            },
        ),
        migrations.CreateModel(
            name='AuthorWroteBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idAuthor', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to='bookworms.authorshow')),
                ('idBook', models.ForeignKey(db_column='idBook', on_delete=django.db.models.deletion.CASCADE, to='bookworms.book')),
            ],
            options={
                'db_table': 'AuthorWroteBook',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('idAchievement', models.AutoField(primary_key=True, serialize=False)),
                ('numberOfBooks', models.IntegerField()),
                ('idBadge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookworms.badge')),
            ],
            options={
                'db_table': 'Achievement',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('idRequest', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('surname', models.CharField(max_length=45)),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to='bookworms.user')),
            ],
            options={
                'db_table': 'Request',
            },
        ),
        migrations.CreateModel(
            name='HasBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idBadge', models.ForeignKey(db_column='idBadge', on_delete=django.db.models.deletion.CASCADE, to='bookworms.badge')),
                ('idUser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'HasBadge',
                'unique_together': {('idBadge', 'idUser')},
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('idUserAuth', models.OneToOneField(db_column='idUserAuth', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField(null=True)),
                ('idAuthor', models.ForeignKey(db_column='idAuthor', on_delete=django.db.models.deletion.CASCADE, to='bookworms.authorshow')),
            ],
            options={
                'db_table': 'Author',
            },
        ),
    ]
